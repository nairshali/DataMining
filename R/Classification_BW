library(rpart) 
library(plyr)

# Load data
bcw <-read.table(file.choose(),header=T,sep=",") 
bcw <- transform(bcw, Class = as.factor(Class))

# initialize variables

Rand.sample <- list()
Average_resub <- list()
Average_hold_out <- list()
sd_resub <- list()
sd_hold_out <- list()
resub_tot_time <- list()
holdout_tot_time <- list()


Average_loocv <- list()
sd_loocv <- list()
loocv_tot_time <- list()

# Total No of rows input data set
No_rows <- nrow(bcw) + 1

# initialize for sampling data
i <- 0

# randomly selecting a sample (e.g., with size 
# varying from 100 to n) from the original dataset D (|D|=n)
for (s in seq(100,No_rows,100)){
  
  # increment
  i = i + 1
  
  # sample size
  Rand.sample[i] <- s
  
  # sample data   
  SampledataIdx <- sample(No_rows, size = s, replace = FALSE)
  bcw.data <- bcw[SampledataIdx,]
  # print(paste(SampledataIdx))
  
  # initialize variables
  resub_accuracy <- list()
  hold_out_accuracy <- list()
  resub_time <- list()
  holdout_time <- list()

  # Resubstitutions and HoldOut
      # No of Trials
      for (t in 1:20){

        # sample size 90% - 10%
        bcw_row <- nrow(bcw.data)
        sampleRate <- 0.10
        sampleSize <- bcw_row * sampleRate
        # paste("sample size is: ", sampleSize)
        
        # Test data and training data
        testSampleIdx <- sample(bcw_row, size=sampleSize) #testSampleIdx
        testSet <- bcw.data[testSampleIdx,] #testSet
        trainingSet <- bcw.data[-testSampleIdx,] #trainingSet
        print(paste("Test set size<",nrow(testSet),">; Training set size<", nrow(trainingSet), ">", sep=""))
        
        # build a predictive model
        bcw.dt <- rpart(Class ~ ., data=trainingSet, method="class")  #bcw.dt

        start_time <- Sys.time()
        # Resubstitution method: acc/error on the training set
        prediction <- predict(bcw.dt, newdata=trainingSet, type="class")
        cM <- table(trainingSet$Class, prediction) #print(cM)
        acc <- sum(diag(cM))/sum(cM)
        resub_accuracy[t] = acc
        rErr <- 1.0 - acc
        print(paste("resub method: accuracy = ", round(acc*100,1), "% and resubstitution error = ", round(rErr*100,1), "%", sep=""))

        end_time <- Sys.time()
        resub_time[t] <- end_time - start_time
        
        start_time <- Sys.time()
        # Hold-out method: acc/error on the test set
        prediction <- predict(bcw.dt, newdata=testSet, type="class")
        cM <- table(testSet$Class, prediction) #print(cM)
        acc <- sum(diag(cM))/sum(cM)
        hold_out_accuracy[t] = acc
        rErr <- 1.0 - acc
        end_time <- Sys.time()
        holdout_time[t] <- end_time - start_time

        print(paste("hold-out method: accuracy = ", round(acc*100,1), "% and error = ", round(rErr*100,1), "%", sep=""))
     
        }
        
      # Mean / std for each sample data
      sd_resub[i] <- sd(unlist(resub_accuracy))
      sd_hold_out[i] <- sd(unlist(hold_out_accuracy))

      Average_resub[i] <- mean(unlist(resub_accuracy))
      Average_hold_out[i] <- mean(unlist(hold_out_accuracy))

      # Time monitoring
      holdout_tot_time[i] <- sum(unlist(holdout_time))
      resub_tot_time[i] <- sum(unlist(resub_time))
      
      # 10-Fold
      N <- nrow(bcw)
      xVal_accuracy <- list()

      start_time <- Sys.time()

      for (t in 1:20){
       # bcw <- shuffle(bcw)
        correct_predictions <- 0
        folds <- split(bcw, cut(sample(1:nrow(bcw)),10) )
      
      for (f in 1:length(folds)){
          # dt build a predictive model from all records n data but i
          trainingSet <- ldply(folds[-f], data.frame) #trainingSet
          testSet <- ldply(folds[f], data.frame) #testSet
          
          # paste("Test set size<",nrow(testSet),">; Training set size<", nrow(trainingSet), ">", sep="")
          bcw.dt <- rpart(Class ~Sample.code.number +
                            Clump.Thickness  +
                            Uniformity.of.Cell.Size   +
                            Uniformity.of.Cell.Shape  +
                            Marginal.Adhesion   +
                            Single.Epithelial.Cell.Size    +
                            Bare.Nuclei       +
                            Bland.Chromatin    +
                            Normal.Nucleoli    +
                            Mitoses , data=trainingSet, method="class")  #bcw.dt
          
          # apply the model dt to the record
          prediction <- predict(bcw.dt, newdata=testSet, type="class")
          cM <- table(testSet$Class, prediction)
          x <- sum(diag(cM))
          
          # print(cM)
          correct_predictions <- correct_predictions + x
        }
        
        acc <- correct_predictions / N
        rErr <- 1.0 - acc
        print(paste("xVal method: accuracy = ", round(acc*100,1), "% and xVal error = ", round(rErr*100,1), "%", sep=""))
        xVal_accuracy[t] <- acc
      }
      end_time <- Sys.time()

      # Mean / std for each sample data
      sd_xVal[i] <- sd(unlist(xVal_accuracy))
      Average_xVal[i] <- mean(unlist(xVal_accuracy))

      # Time monitoring
      xVal_tot_time[i] <- end_time - start_time
      
      
      # Leave one out Method
      N <- nrow(bcw)
      sampleSize <- ( N * 0.9 ) + 1
      loocv_accuracy <- list()

      start_time <- Sys.time()

      for (t in 1:20){
        #set.seed(1234)
        SampleIdx <- sample(N, size=sampleSize) #testSampleIdx
        correct_predictions <- 0
        
        for (idx in SampleIdx){
          # dt build a predictive model from all records n data but i
          trainingSet <- bcw[-idx,] #trainingSet
          testSet <- bcw[idx,] #testSet
          # paste("Test set size<",nrow(testSet),">; Training set size<", nrow(trainingSet), ">", sep="")

          bcw.dt <- rpart(Class ~., data=trainingSet, method="class")  #bcw.dt

          # apply the model dt to the record
          prediction <- predict(bcw.dt, newdata=testSet, type="class")
          cM <- table(testSet$Class, prediction)
          x <- sum(diag(cM))
          # print(cM)
          correct_predictions <- correct_predictions + x
        }
        
        acc <- correct_predictions/sampleSize
        rErr <- 1.0 - acc
        print(paste("LOOCV method: accuracy = ", round(acc*100,1), "% and LOOCV error = ", round(rErr*100,1), "%", sep=""))
        loocv_accuracy[t] <- acc
        
      }

        acc <- correct_predictions/sampleSize
        rErr <- 1.0 - acc
        print(paste("LOOCV method: accuracy = ", round(acc*100,1), "% and LOOCV error = ", round(rErr*100,1), "%", sep=""))
        loocv_accuracy[t] <- acc
      }

      end_time <- Sys.time()

      # Mean / std for each sample data
      sd_loocv[i] <- sd(unlist(loocv_accuracy))
      Average_loocv[i] <- mean(unlist(loocv_accuracy))

      # Time monitoring
      loocv_tot_time[i] <- end_time - start_time
  
}

# build sample data dataframe
data <- data.frame(cbind("Sampledata" = Rand.sample))

# Resubstitution - Bar Plot Accuracy ( Mean and std deviation ) 
library(plotly)
plot_ly(data, x = ~Sampledata, y = ~Average_resub, type = 'bar', name = 'Mean') %>%
        add_trace(y = ~sd_resub, name = 'Std. deviation') %>%
        layout(yaxis = list(title = 'Accuracy Percentage'), barmode = 'group')

